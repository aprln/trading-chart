// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.9
// source: grpc-server/protobuf/trading_chart.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradingChart_StreamOHLCCandlestick_FullMethodName = "/trading_chart.TradingChart/StreamOHLCCandlestick"
)

// TradingChartClient is the client API for TradingChart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingChartClient interface {
	StreamOHLCCandlestick(ctx context.Context, in *StreamOHLCCandlestickRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamOHLCCandlestickResponse], error)
}

type tradingChartClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingChartClient(cc grpc.ClientConnInterface) TradingChartClient {
	return &tradingChartClient{cc}
}

func (c *tradingChartClient) StreamOHLCCandlestick(ctx context.Context, in *StreamOHLCCandlestickRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamOHLCCandlestickResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradingChart_ServiceDesc.Streams[0], TradingChart_StreamOHLCCandlestick_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamOHLCCandlestickRequest, StreamOHLCCandlestickResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingChart_StreamOHLCCandlestickClient = grpc.ServerStreamingClient[StreamOHLCCandlestickResponse]

// TradingChartServer is the server API for TradingChart service.
// All implementations must embed UnimplementedTradingChartServer
// for forward compatibility.
type TradingChartServer interface {
	StreamOHLCCandlestick(*StreamOHLCCandlestickRequest, grpc.ServerStreamingServer[StreamOHLCCandlestickResponse]) error
	mustEmbedUnimplementedTradingChartServer()
}

// UnimplementedTradingChartServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradingChartServer struct{}

func (UnimplementedTradingChartServer) StreamOHLCCandlestick(*StreamOHLCCandlestickRequest, grpc.ServerStreamingServer[StreamOHLCCandlestickResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOHLCCandlestick not implemented")
}
func (UnimplementedTradingChartServer) mustEmbedUnimplementedTradingChartServer() {}
func (UnimplementedTradingChartServer) testEmbeddedByValue()                      {}

// UnsafeTradingChartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingChartServer will
// result in compilation errors.
type UnsafeTradingChartServer interface {
	mustEmbedUnimplementedTradingChartServer()
}

func RegisterTradingChartServer(s grpc.ServiceRegistrar, srv TradingChartServer) {
	// If the following call pancis, it indicates UnimplementedTradingChartServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradingChart_ServiceDesc, srv)
}

func _TradingChart_StreamOHLCCandlestick_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOHLCCandlestickRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingChartServer).StreamOHLCCandlestick(m, &grpc.GenericServerStream[StreamOHLCCandlestickRequest, StreamOHLCCandlestickResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingChart_StreamOHLCCandlestickServer = grpc.ServerStreamingServer[StreamOHLCCandlestickResponse]

// TradingChart_ServiceDesc is the grpc.ServiceDesc for TradingChart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingChart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading_chart.TradingChart",
	HandlerType: (*TradingChartServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOHLCCandlestick",
			Handler:       _TradingChart_StreamOHLCCandlestick_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc-server/protobuf/trading_chart.proto",
}
